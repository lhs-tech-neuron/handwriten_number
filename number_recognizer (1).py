# -*- coding: utf-8 -*-
"""Number Recognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yCjnJrUU4OHzYnZie37yFOAZLbDxdjdM
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test,y_test) = mnist.load_data()

x_train = tf.keras.utils.normalize(x_train, axis =1 )
x_test= tf.keras.utils.normalize(x_test, axis =1 )

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten(input_shape =(28,28)))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.softmax))


model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

historytrain = model.fit(x_train, y_train, epochs= 8)
historytest = model.fit(x_test, y_test, epochs= 8)

print(history.history.keys())
# summarize history for accuracy
plt.plot(historytrain.history['accuracy'])
plt.plot(historytest.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(historytrain.history['loss'])
plt.plot(historytest.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

loss, accuaracy = model.evaluate(x_test, y_test)
print(accuaracy)
print(loss)

number = cv.imread('5.jpg')[:,:,0]
number = np.invert(np.array([number]))
prediction = model.predict(number)
print(f'The result is: {np.argmax(prediction)}')
plt.imshow(number[0], cmap = plt.cm.binary)
plt.show()

# Custom uploaded files from computer loop
for x in range(1,10):
  number = cv.imread(f'{x}.png')[:,:,0]
  number = np.invert(np.array([number]))
  prediction = model.predict(number)
  print(f'The result is: {np.argmax(prediction)}')
  plt.imshow(number[0], cmap = plt.cm.binary)
  plt.show()